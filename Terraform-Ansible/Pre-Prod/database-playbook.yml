- name: Database-deployment
  hosts: Pre-Prod_database
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Add and configure the admin user
      ansible.builtin.user:
        name: "admin"
        password: "{{ password | password_hash('sha512', 'salt') }}"
        append: true
        groups: sudo
        shell: /bin/bash
    - name: Disallow SSH password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^PasswordAuthentication"
        line: "PasswordAuthentication no"
        state: present
        validate: sshd -t -f %s
    - name: Disallow SSH password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^PermitRootLogin"
        line: "PermitRootLogin no"
        state: present
        validate: sshd -t -f %s
    - name: Restart ssh service to apply config
      service:
        name: ssh
        state: restarted
    - name: Create the directory if it does not already exist
      ansible.builtin.file:
        path: "/home/admin/.ssh"
        state: directory
        mode: '700'
        owner: "admin"
        group: "admin"
    - name: Copy ssh key file to target
      ansible.builtin.copy:
        dest: "/home/admin/.ssh/authorized_keys"
        src: ~/.ssh/linode.pub
        owner: "admin"
        mode: '600'
    - name: Install some dependencies
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - lsb-release
          - gnupg2
          - gpg
          - software-properties-common
        update_cache: true
    - name: Add docker apt repository key.
      ansible.builtin.get_url:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
        force: true
    - name: Add docker repository into sources list
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
    - name: Install Docker
      ansible.builtin.apt:
        name:
          - docker-ce 
          - docker-ce-cli 
          - containerd.io 
          - docker-buildx-plugin 
          - docker-compose-plugin
        update_cache: true
    - name: Add user to docker group
      ansible.builtin.user:
        name: admin
        groups: docker
        append: true
    - name: Create the docker-entrypoint directory
      ansible.builtin.file:
        path: "/home/admin/database/"
        state: directory
        mode: '777'
        owner: "admin"
        group: "admin"
    - name: Copy the docker-compose.yml for the database to launch later
      ansible.builtin.copy:
        dest: "/home/admin/database"
        src: ./docker-compose.yml
        owner: "root"
        mode: '777'
    - name: Install mongodb tools
      ansible.builtin.apt:
        deb: https://fastdl.mongodb.org/tools/db/mongodb-database-tools-debian11-x86_64-100.9.4.deb
    - name: Copy .env file
      ansible.builtin.copy:
        dest: "/home/admin/database"
        src: ./.env
        owner: "root"
        mode: '777'
    - name: Create the docker-entrypoint directory
      ansible.builtin.file:
        path: "/home/admin/database/docker-entrypoint-initdb.d/"
        state: directory
        mode: '777'
        owner: "admin"
        group: "admin"
    - name: Copy mongodb init script inside docker-entrypoint directory to create user for morningnews for later
      ansible.builtin.copy:
        dest: "/home/admin/database/docker-entrypoint-initdb.d/"
        src: ./docker-entrypoint-initdb.d/mongo-init.js
        owner: "root"
        mode: '777'
    - name: Launch docker compose
      community.docker.docker_compose_v2:
        project_src: /home/admin/database
    - name: Create a Production database copy
      ansible.builtin.shell: 'mongoexport --uri {{ produrl }} --collection users --type json --out database.json'
    - name: Import database to pre-prod 
      ansible.builtin.shell: 'mongoimport --drop --collection=users "{{ preprodurl }}" database.json  --authenticationDatabase admin'
    - name: Download crowdsec repo install script
      ansible.builtin.get_url: url=https://packagecloud.io/install/repositories/crowdsec/crowdsec/script.deb.sh dest=/root/crowdsecinstaller.sh mode=0755
    - name: Execute crowdsec repo install script
      ansible.builtin.shell: /root/crowdsecinstaller.sh
    - name: Remove the crowdsec repo install script
      ansible.builtin.file: path=/root/crowdsecinstaller.sh  state=absent
    - name: Adds crowdsec package
      ansible.builtin.apt:
        name: crowdsec
        state: present
    - name: adds crowdsec-firewall-bouncer-iptables package
      ansible.builtin.apt:
        name: crowdsec-firewall-bouncer-iptables
        state: present
    - name: Check crowdsecurity/whitelist-good-actors
      ansible.builtin.shell: sudo cscli collections list | grep crowdsecurity/whitelist-good-actors | awk '{print($3)}'
      register: collectionState
    - name: install whitelist-good-actors collection
      ansible.builtin.shell: cscli collections install crowdsecurity/whitelist-good-actors
      when: collectionState.stdout != "enabled"
    - name: Restart crowdsec service
      ansible.builtin.service:
        name: crowdsec
        state: restarted
      when: collectionState.stdout != "enabled"
    - name: Allow connections on multiple ports
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_ports:          
          - "80"
          - "443"
          - "22"
          - "53"
          - "9216"
        jump: ACCEPT
    - name: Allow connections on multiple ports
      ansible.builtin.iptables:
        chain: OUTPUT
        protocol: tcp
        destination_ports:
          - "80"
          - "443"
          - "22"
          - "53"
          - "27017"
        jump: ACCEPT
    - name: Allow related and established connections
      ansible.builtin.iptables:
        chain: INPUT
        ctstate: ESTABLISHED,RELATED
        jump: ACCEPT
    - name: Set the policy for the INPUT chain to DROP
      ansible.builtin.iptables:
        chain: INPUT
        policy: DROP